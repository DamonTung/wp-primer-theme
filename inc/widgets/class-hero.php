<?php

/**
 * Custom hero widget class.
 *
 * @class      Primer_Hero
 * @package    Classes
 * @subpackage Widgets
 * @category   Class
 * @author     GoDaddy
 * @since      NEXT
 * @extends    WP_Widget
 */
final class Primer_Hero extends WP_Widget {

	/**
	 * Widget constructor.
	 */
	public function __construct() {

		$widget_options = array(
			'classname'                   => 'primer-widgets primer-widget-hero widget_text',
			'description'                 => __( 'A specialy crafted widget to be used in the hero section of Primer related themes.', 'primer' ),
			'customize_selective_refresh' => true,
		);

		parent::__construct(
			'primer_hero',
			__( 'Homepage Hero Widget', 'primer' ),
			$widget_options
		);

	}

	/**
	 * Widget form fields.
	 *
	 * @param array $instance The widget instance values.
	 *
	 * @return string
	 */
	public function form( $instance ) {

		add_action( 'admin_footer',                            array( $this, 'enqueue_scripts' ) );
		add_action( 'customize_controls_print_footer_scripts', array( $this, 'print_customizer_scripts' ) );

		?>
		<script>
			( function ( $ ) {

				// This let us know that we appended a new widget to reset sortables.
				$( document ).trigger( 'primer.widgets.change' );

			} )( jQuery );
		</script>
		<?php

		$fields = $this->get_fields( $instance );

		echo '<div class="primer-widget primer-widget-hero">';

		foreach ( $fields as $key => $field ) {

			$method = $field['form_callback'];

			if ( is_callable( array( $this, $method ) ) ) {

				$this->$method( $field );

			}

		}

		echo '</div>'; // End primer-widget-contact.

	}

	/**
	 * Print current label.
	 *
	 * @param array $field Widget field.
	 */
	protected function print_label( array $field ) {

		printf(
			' <label for="%s" title="%s">%s</label>',
			esc_attr( $field['id'] ),
			esc_attr( $field['description'] ),
			esc_html( $field['label'] )
		);

	}

	/**
	 * Print label and wrapper
	 *
	 * @param array $field Widget field.
	 */
	protected function before_form_field( array $field ) {

		$classes = array( $field['type'], $field['key'] );

		// @codingStandardsIgnoreStart
		printf(
			'<p class="%s">',
			implode( ' ', $classes )
		);
		// @codingStandardsIgnoreEnd

		$this->print_label( $field );

	}

	/**
	 * Render input field for admin form.
	 *
	 * @param array $field Widget field.
	 */
	protected function render_form_input( array $field ) {

		$this->before_form_field( $field );

		printf(
			'<input class="%s" id="%s" name="%s" type="%s" value="%s" placeholder="%s" autocomplete="off">',
			esc_attr( $field['class'] ),
			esc_attr( $field['id'] ),
			esc_attr( $field['name'] ),
			esc_attr( $field['type'] ),
			esc_attr( $field['value'] ),
			esc_attr( $field['placeholder'] )
		);

		$this->after_form_field();

	}

	/**
	 * Render textarea field for admin widget form.
	 *
	 * @param array $field Widget field.
	 */
	protected function render_form_textarea( array $field ) {

		$this->before_form_field( $field );

		printf(
			'<textarea class="%s" id="%s" name="%s" placeholder="%s">%s</textarea>',
			esc_attr( $field['class'] ),
			esc_attr( $field['id'] ),
			esc_attr( $field['name'] ),
			esc_attr( $field['placeholder'] ),
			esc_textarea( $field['value'] )
		);

		$this->after_form_field();

	}

	/**
	 * Close wrapper of form field.
	 */
	protected function after_form_field() {

		echo '</p>';

	}

	/**
	 * Front-end display.
	 *
	 * @param array $args Widget arguements.
	 * @param array $instance Widget instance arguements.
	 */
	public function widget( $args, $instance ) {

		$fields = $this->get_fields( $instance );

		if ( $this->is_widget_empty( $fields ) ) {

			return;

		}

		$title = array_shift( $fields );

		echo $args['before_widget']; // xss ok.

		if ( ! empty( $title['value'] ) ) {

			/**
			 * Filter the widget title
			 *
			 * @since NEXT
			 *
			 * @var string
			 */
			$title = (string) apply_filters( 'widget_title', $title['value'] );

			echo $args['before_title'] . $title . $args['after_title']; // xss ok.

		}

		echo '<div class="textwidget">';

		foreach ( $fields as $key => $field ) {

			if ( empty( $field['value'] ) || ! $field['show_front_end'] ) {

				continue;

			}

			if ( 'button_text' === $key ) {

				if ( ! isset( $fields['button_link'] ) || empty( $fields['button_link']['value'] ) ) {

					continue;

				}

				/**
				 * Filter css class of the link generated by the widget.
				 *
				 * @filter primer_widget_hero_link_class
				 *
				 * @since NEXT
				 *
				 * @var array
				 */
				$class = apply_filters( 'primer_widget_hero_link_class', array( 'button' ) );

				/**
				 * Filter target property of the link generated by the widget.
				 *
				 * @filter primer_widget_hero_link_class
				 *
				 * @since NEXT
				 *
				 * @var array
				 */
				$target = apply_filters( 'primer_widget_hero_link_target', '_self', $field );

				// @codingStandardsIgnoreStart
				printf(
					'<p><a href="%1$s" class="%2$s" target="%s">%3$s</a></p>',
					call_user_func( $fields['button_link']['escaper'], $fields['button_link']['value'] ),
					esc_attr( implode( ' ', $class ) ),
					call_user_func( $field['escaper'], $field['value'] ),
					esc_attr( $target )
				);
				// @codingStandardsIgnoreEnd

				continue;

			}

			echo call_user_func( $field['escaper'], $field['value'] ); // xss ok.

		}

		echo $args['after_widget']; // xss ok.

		echo '</div>'; // End div.textwidget.

	}

	/**
	 * Check if all the fields we show on the front-end are empty.
	 *
	 * @param array $fields Widget fields.
	 *
	 * @return bool
	 */
	protected function is_widget_empty( array $fields ) {

		foreach ( $fields as $key => $field ) {

			/**
			 * Filter to ignore the title when checking if a widget is empty
			 *
			 * @since NEXT
			 *
			 * @var bool
			 */
			$ignore_title = (bool) apply_filters( 'primer_is_widget_empty_ignore_title', false );

			if ( 'title' === $key && $ignore_title ) {

				continue;

			}

			if ( ! empty( $field['value'] ) && $field['show_front_end'] ) {

				return false;

			}

		}

		return true;

	}

	/**
	 * Initialize fields for use on front-end of forms.
	 *
	 * @param array $instance Widget instance.
	 * @param array $fields Widgets fields.
	 *
	 * @return array
	 */
	protected function get_fields( array $instance, array $fields = array() ) {

		$fields = array(
			'title'      => array(
				'label'         => __( 'Title:', 'primer' ),
				'description'   => __( 'The title of widget. Leave empty for no title.', 'primer' ),
				'value'         => ! empty( $instance['title'] ) ? $instance['title'] : '',
			),
			'message'    => array(
				'label'         => __( 'Message:', 'primer' ),
				'type'          => 'textarea',
				'sanitizer'     => array( $this, 'sanitize_message' ),
				'escaper'       => array( $this, 'escape_message' ),
				'form_callback' => 'render_form_textarea',
			),
			'button_text' => array(
				'label'          => __( 'Button Text:', 'primer' ),
				'type'           => 'text',
			),
			'button_link' => array(
				'label'          => __( 'Button Link URL:', 'primer' ),
				'placeholder'    => __( 'Paste URL or type to search', 'primer' ),
				'type'           => 'text',
				'class'          => 'widefat link',
				'sanitizer'      => 'esc_url_raw',
				'escaper'        => 'esc_url',
				'show_front_end' => false,
			),
		);

		/**
		 * Register custom fields for the hero widgets.
		 *
		 * @since NEXT
		 *
		 * @var array
		 */
		$fields = apply_filters( 'primer_widget_hero_custom_fields', $fields, $instance );
		$fields = $this->add_common_field_properties( $instance, $fields );

		/**
		 * Filter the hero widget fields
		 *
		 * @since NEXT
		 *
		 * @var array
		 */
		return (array) apply_filters( 'primer_widget_hero_fields', $fields, $instance );

	}

	/**
	 * Takes an array of fields and add common properties to it.
	 *
	 * @param array $instance Widget instance
	 * @param array $fields Widget fields.
	 *
	 * @return array All the fields with comment properties.
	 */
	private function add_common_field_properties( array $instance, array $fields = array() ) {

		/**
		 * Default fields properties.
		 *
		 * @var array
		 */
		$field_defaults = array(
			'key'            => '',
			'icon'           => '',
			'class'          => 'widefat',
			'id'             => '',
			'name'           => '',
			'label'          => '',
			'description'    => '',
			'type'           => 'text',
			'sanitizer'      => 'sanitize_text_field',
			'escaper'        => 'esc_html',
			'form_callback'  => 'render_form_input',
			'value'          => '',
			'placeholder'    => '',
			'show_front_end' => true, // Are we showing this field on the front end?
		);

		foreach ( $fields as $key => &$field ) {

			$common_properties = array(
				'key'   => $key,
				'icon'  => $key,
				'id'    => $this->get_field_id( $key ),
				'name'  => $this->get_field_name( $key ) . '[value]',
				'value' => ! empty( $instance[ $key ]['value'] ) ? $instance[ $key ]['value'] : '',
			);

			$common_properties = wp_parse_args( $common_properties, $field_defaults );
			$field             = wp_parse_args( $field, $common_properties );

		}

		return $fields;

	}

	/**
	 * Sanitize widget form values as they are saved.
	 *
	 * @param  array $new_instance Values just sent to be saved.
	 * @param  array $old_instance Previously saved values from database.
	 *
	 * @return array Updated safe values to be saved.
	 */
	public function update( $new_instance, $old_instance ) {

		$fields = $this->get_fields( $old_instance );

		foreach ( $new_instance as $key => &$instance ) {

			// Title can't be an array.
			if ( 'title' === $key ) {

				$instance = call_user_func( $fields[ $key ]['sanitizer'], $instance['value'] );

				continue;

			}

			$instance['value'] = call_user_func( $fields[ $key ]['sanitizer'], $instance['value'] );

		}

		return $new_instance;

	}

	/**
	 * Sanitize field message.
	 *
	 * @param string $value Message value.
	 *
	 * @return string
	 */
	public function sanitize_message( $value ) {

		return current_user_can( 'unfiltered_html' ) ? $value : wp_kses_post( stripslashes( $value ) );

	}

	/**
	 * Escape field message.
	 *
	 * @param string $value Message value.
	 *
	 * @return string
	 */
	public function escape_message( $value ) {

		return wpautop( apply_filters( 'widget_text', $value ) );

	}

	/**
	 * Print footer script and styles.
	 */
	public function enqueue_scripts() {

		$suffix = SCRIPT_DEBUG ? '' : '.min';

		wp_enqueue_script( 'jquery-ui-autocomplete' );

		wp_enqueue_script(
			'primer-widgets-hero-admin',
			get_template_directory_uri() . "/assets/js/widgets/hero-admin{$suffix}.js",
			array( 'jquery', 'jquery-ui-autocomplete' ),
			PRIMER_VERSION,
			true
		);

		// We need the internal linking token.
		wp_localize_script(
			'primer-widgets-hero-admin',
			'primer_widgets_hero_admin',
			array(
				'_ajax_linking_nonce' => wp_create_nonce( 'internal-linking' ),
			)
		);

	}

	/**
	 * Print customizer script
	 */
	public function print_customizer_scripts() {

		$this->enqueue_scripts();

		wp_print_scripts( 'primer-widgets-hero-admin' );

	}

}
